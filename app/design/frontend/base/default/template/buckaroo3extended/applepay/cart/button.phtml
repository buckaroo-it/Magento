<?php
/**
 * Empty div's to be used for the ApplePay pop-up.
 *
 * @var TIG_Buckaroo3Extended_Block_PaymentMethods_Applepay_Product_Button $this
 */

$isConfigurable = $this->isConfigurable();

?>
<div id="buckaroo-apple-pay-button">
    <div id="set-up-apple-pay-button" class="apple-pay apple-pay-set-up-button apple-pay-set-up-button-black input-block-level d-none" style="display: none;"></div>
    <div id="apple-pay-button" class="apple-pay input-block-level d-none" style="display: none;"></div>
    <div id="apple-pay-wrapper" lang="<?php echo explode('_', Mage::app()->getStore()->getLocaleCode())[0]; ?>" class="apple-pay apple-pay-button apple-pay-button-black d-none apple-pay-button-type-buy" style="display: none;"></div>
    <div id="apple-pay-disabled" <?php echo $isConfigurable ? '' : 'style="display: none;"';?> class="apple-pay apple-pay-button apple-pay-button-black apple-pay-button-type-buy d-none"></div>
</div>

<script>
    <?php if ($isConfigurable): ?>
    /**
     * Only display real Apple Pay button if all attributes are configured.
     */
    var elementsToValidate = jQuery('#apple-pay-disabled');

    elementsToValidate.on('click, mousedown, mouseup', function() {
        /**
         * Custom validation for Amac.
         */
        var cartButton = jQuery('button.button.btn-cart');

        if(cartButton.hasClass('disabled')) {
            jQuery('.pdp-configurable-error').each(function () {
                jQuery(this).removeClass('no-display');
            });

            return;
        } else {
            jQuery('.pdp-configurable-error').each(function () {
                jQuery(this).addClass('no-display');
            });
        }

        /**
         * Validate Magento Configurable Product form.
         */
        var applePay = jQuery('.method-checkout-cart-methods-applepay, #set-up-apple-pay-button, #apple-pay-button, #apple-pay-wrapper');

        var attributes = jQuery('[name^="super_attribute"]');
        var validated  = 0;

        attributes.each(function() {
            var valid = Validation.validate(this);

            if (valid === true) {
                validated++;
            }

            if (attributes.length === validated) {
                applePay.click();
            }
        })
    })
    <?php endif; ?>

    var Buckaroo;
    (function(Buckaroo) {
        var Magento;
        (function(Magento) {
            var ApplePay = (function() {
                function ApplePay() {

                }

                /**
                 * Used to retrieve all data from the Quote and create ApplePay Payment Session.
                 */
                ApplePay.prototype.initialize = function() {
                    var optionsArray = this.createOptionsArray();
                    var requiredShippingFields = ["email", "name", "phone", "postalAddress"]
                    var requiredBillingFields = ["email", "name", "postalAddress"]

                    <?php if ($this->isLoggedIn()): ?>
                    requiredShippingFields = ["name", "phone", "postalAddress"]
                    requiredBillingFields = ["name", "postalAddress"]
                    <?php endif; ?>

                    var options = new BuckarooSdk.ApplePay.ApplePayOptions(
                        optionsArray.storeName, optionsArray.countryCode, optionsArray.currencyCode, optionsArray.cultureCode,
                        optionsArray.merchantIdentifier, optionsArray.lineItems, optionsArray.totalLineItems, optionsArray.shippingType,
                        optionsArray.shippingMethods, this.captureFunds, this.updateShippingMethod, this.updateShippingContact,
                        requiredBillingFields, requiredShippingFields, this.restoreCart,
                    );

                    /**
                     * Hooking into this event allows overriding the options with custom values.
                     */
                    jQuery(document).trigger('buckaroo3extended_applepay_options', [this, options]);

                    BuckarooSdk.ApplePay.checkApplePaySupport(optionsArray.merchantIdentifier).then(function (applePaySupported) {
                        if (applePaySupported) {
                            <?php
                                /**
                                 * Set apple_pay_init to true, so new quote is created and restored on pop-up load, and not on
                                 * change of shipping contact.
                                 */
                                Mage::getSingleton('checkout/session')->setApplePayInit(true);
                            ?>
                            var payment = new BuckarooSdk.ApplePay.ApplePayPayment('#apple-pay-wrapper', options)
                            <?php if (!$isConfigurable): ?>
                                jQuery('.method-checkout-cart-methods-applepay, #set-up-apple-pay-button, #apple-pay-button, #apple-pay-wrapper').show();
                            <?php endif; ?>
                            payment.showPayButton('black', 'buy')
                        } else {
                            jQuery('#apple-pay-disabled').hide();
                        }
                    })
                }

                /**
                 * Triggered when Shipping Method is changed within the pop-up.
                 */
                ApplePay.prototype.updateShippingMethod = function(method) {
                    var update = jQuery.ajax(
                        {
                            url: '<?php echo $this->getUpdateShippingMethodsUrl() ?>',
                            method: 'post',
                            context: this,
                            data: {
                                wallet: method
                            },
                            async: false,
                            dataFilter: function(data, type) {
                                var dataArray = JSON.parse(data);

                                return JSON.stringify({
                                    newTotal: new ApplePay.prototype.processTotalLineItems(dataArray),
                                    newLineItems: new ApplePay.prototype.processLineItems(dataArray)
                                })
                            }
                        }
                    );

                    return Promise.resolve(update);
                }

                /**
                 * Updates the shipping method in the quote.
                 */
                ApplePay.prototype.setShippingMethod = function (method) {
                    jQuery.ajax(
                        {
                            url: '<?php echo $this->getSetShippingMethodUrl() ?>',
                            method: 'post',
                            context: this,
                            data: {
                                method: method
                            }
                        }
                    );
                }

                /**
                 * Handles the changes within the pop-up when a different shipping address is selected.
                 *
                 * Method = GET, since we need to send a serialized form if the product is configurable.
                 */
                ApplePay.prototype.updateShippingContact = function(contact) {
                    var jQver = '';

                    if (typeof jQuery !== undefined) {
                        var jQver = jQuery.fn.jquery.split('.');
                    }

                    if (jQver[0] === 3) {
                        return this.updateShippingContactjQ3(contact);
                    }

                    var options = jQuery('#product_addtocart_form').serializeArray()

                    var update = jQuery.ajax(
                        {
                            url: '<?php echo $this->getControllerUrl(); ?>',
                            method: 'get',
                            context: this,
                            data: {
                                wallet: contact,
                                product: {
                                    id: '<?php echo $this->getProductId(); ?>',
                                    qty: jQuery('.add-to-cart #qty').val(),
                                    options: options
                                }
                            },
                            dataType: 'json',
                            async: false,
                            dataFilter: function(data, type) {
                                var dataArray = JSON.parse(data);

                                return JSON.stringify({
                                    errors: [],
                                    newShippingMethods: new ApplePay.prototype.createShippingMethodInformation(dataArray, false),
                                    newTotal: new ApplePay.prototype.processTotalLineItems(dataArray),
                                    newLineItems: new ApplePay.prototype.processLineItems(dataArray)
                                })
                            },
                            error: function(error) {
                                /** Set Timeout to prevent Safari from crashing and reload window to show error in Magento. */
                                setTimeout(
                                    function() {
                                        window.location.reload();
                                    }, 1500
                                )
                            }
                        }
                    );

                    return update;
                }

                /**
                 * Handles the changes within the pop-up when a different shipping address is selected.
                 *
                 * Method = GET, since we need to send a serialized form if the product is configurable.
                 *
                 * Duplicate method, compatible with jQuery 3.
                 */
                ApplePay.prototype.updateShippingContactjQ3 = function(contact) {
                    var options = jQuery('#product_addtocart_form').serializeArray()

                    var update = jQuery.ajax(
                        {
                            url: '<?php echo $this->getControllerUrl(); ?>',
                            method: 'get',
                            context: this,
                            data: {
                                wallet: contact,
                                product: {
                                    id: '<?php echo $this->getProductId(); ?>',
                                    qty: jQuery('.add-to-cart #qty').val(),
                                    options: options
                                }
                            },
                            dataType: 'json',
                            async: false,
                            dataFilter: function(data, type) {
                                var dataArray = JSON.parse(data);

                                return JSON.stringify({
                                    errors: [],
                                    newShippingMethods: new ApplePay.prototype.createShippingMethodInformation(dataArray, false),
                                    newTotal: new ApplePay.prototype.processTotalLineItems(dataArray),
                                    newLineItems: new ApplePay.prototype.processLineItems(dataArray)
                                })
                            },
                            fail: function(error) {
                                /** Set Timeout to prevent Safari from crashing and reload window to show error in Magento. */
                                setTimeout(
                                    function() {
                                        window.location.reload();
                                    }, 1500
                                )
                            }
                        }
                    );

                    return update;
                }

                /**
                 * Pours all necessary data retrieved from the quote into its right format.
                 *
                 * @returns {{lineItems: *, merchantIdentifier: *, cultureCode: *, countryCode: (string), totalLineItems: *, shippingType: string, storeName: *, currencyCode: *, shippingMethods: *}}
                 */
                ApplePay.prototype.createOptionsArray = function() {
                    return {
                        storeName: '<?php echo $this->getStoreName() ?>',
                        countryCode: '<?php echo $this->getCountryCode() ?>',
                        currencyCode: '<?php echo $this->getCurrency() ?>',
                        cultureCode: '<?php echo $this->getCultureCode() ?>',
                        merchantIdentifier: '<?php echo $this->getGuid() ?>',
                        lineItems: this.processLineItems(null),
                        totalLineItems: this.processTotalLineItems(null),
                        shippingType: 'shipping',
                        shippingMethods: this.createShippingMethodInformation(undefined, true)
                    }
                }

                /**
                 *
                 *
                 * @param data
                 * @returns {*[]}
                 */
                ApplePay.prototype.processLineItems = function(data) {
                    if (data === null || data === undefined || data.length < 1) {
                        return [
                            {label: '<?php echo $this->getSubtotalText(); ?>', amount: '0.00', type: 'pending'},
                            {label: '<?php echo $this->__('Delivery costs'); ?>', amount: '0.00', type: 'pending'},
                            {label: '<?php echo $this->__('Discount'); ?>', amount: '0.00', type: 'pending'}
                        ]
                    }

                    if (typeof data['shipping'] !== 'undefined') {
                        var price = parseFloat(data['shipping'])
                    }

                    if(data['discount'] == null) {
                        return [
                            {label: '<?php echo $this->getSubtotalText(); ?>', amount: parseFloat(data['subTotal']).toFixed(2), type: 'final'},
                            {label: '<?php echo $this->__('Delivery costs'); ?>', amount: price.toFixed(2), type: 'final'}
                        ]
                    }
                    return [
                        {label: '<?php echo $this->getSubtotalText(); ?>', amount: parseFloat(data['subTotal']).toFixed(2), type: 'final'},
                        {label: '<?php echo $this->__('Delivery costs'); ?>', amount: price.toFixed(2), type: 'final'},
                        {label: '<?php echo $this->__('Discount'); ?>', amount: parseFloat(data['discount']).toFixed(2), type: 'final'}
                    ]
                }

                /**
                 * Processes the total lines for display.
                 *
                 * @param data
                 * @returns {{amount: string, label: string, type: string}}
                 */
                ApplePay.prototype.processTotalLineItems = function(data) {
                    if (data === null || data === undefined || data.length < 1) {
                        return {
                            label: '<?php echo $this->getStoreName(); ?>',
                            amount: '0.00',
                            type: 'pending'
                        }
                    }

                    var grandTotal = parseFloat(data['grandTotal'])

                    return {
                        label: '<?php echo $this->getStoreName(); ?>', amount: grandTotal.toFixed(2) , type: 'final'
                    }
                }

                /**
                 * Processes the available information about the selected shipping method.
                 *
                 * @param shippingMethods
                 * @param onPageLoad
                 * @returns {{identifier, amount: string, label: *, detail: string}[]}
                 */
                ApplePay.prototype.createShippingMethodInformation = function(shippingMethods, onPageLoad = true) {
                    var methods = [];

                    if (onPageLoad === false && shippingMethods[0] === undefined) {
                        /** If no shipment methods are found, reload the page and display an error. */
                        window.location.reload();

                        return methods;
                    }

                    if (shippingMethods === undefined) {
                        return methods;
                    }

                    for(var i = 0; i < Object.keys(shippingMethods).length; i++) {
                        if (shippingMethods[i] === undefined) {
                            continue;
                        }
                        methods[i] = {
                            label: shippingMethods[i].carrier_title,
                            amount: shippingMethods[i].price.toString(),
                            identifier: shippingMethods[i].code,
                            detail: shippingMethods[i].method_title
                        }
                    }

                    return methods;
                }

                /**
                 * Saves order to Magento and sends it to Buckaroo. Checks for jQuery compatibility.
                 *
                 * @param payment
                 */
                ApplePay.prototype.placeOrder = function(payment) {
                    var jQver = '';

                    if (typeof jQuery !== undefined) {
                        var jQver = jQuery.fn.jquery.split('.');
                    }

                    if (jQver[0] === 3) {
                        return this.placeOrderjQ3(payment);
                    }

                    return jQuery.ajax(
                        {
                            url: '<?php echo $this->getSaveOrderUrl() ?>',
                            method: 'post',
                            context: this,
                            data: {
                                payment: payment
                            },
                            success: function(response) {
                                /** Set Timeout before redirecting to prevent Safari from crashing. */
                                setTimeout(
                                    function() {
                                        window.location.href = '<?php echo $this->getApplepaySuccessUrl() ?>';
                                    }, 1500
                                )
                            },
                            error: function(error) {
                                /** Set Timeout to prevent Safari from crashing and reload window to show error in Magento. */
                                setTimeout(
                                    function() {
                                        window.location.reload();
                                    }, 1500
                                )
                            }
                        }
                    );
                }

                /**
                 * Place Order method, compatible with jQuery 3.
                 */
                ApplePay.prototype.placeOrderjQ3 = function(payment) {
                    return jQuery.ajax(
                        {
                            url: '<?php echo $this->getUrl('/buckaroo3extended/checkout/saveOrder') ?>',
                            method: 'post',
                            context: this,
                            data: {
                                payment: payment
                            },
                            done: function(response) {
                                /** Set Timeout before redirecting to prevent Safari from crashing. */
                                setTimeout(
                                    function() {
                                        window.location.href = '<?php echo $this->getUrl('/buckaroo3extended/checkout/applepaySuccess') ?>';
                                    }, 1500
                                )
                            },
                            fail: function(error) {
                                /** Set Timeout to prevent Safari from crashing and reload window to show error in Magento. */
                                setTimeout(
                                    function() {
                                        window.location.reload();
                                    }, 1500
                                )
                            }
                        }
                    );
                }

                /**
                 * Restore the old cart.
                 */
                ApplePay.prototype.restoreCart = function() {
                    jQuery.ajax(
                        {
                            url: '<?php echo $this->getUrl('/buckaroo3extended/checkout/restoreCart') ?>',
                            method: 'post',
                            data: {
                                page: '<?php echo Mage::app()->getFrontController()->getRequest()->getControllerName();?>'
                            }
                        }
                    )
                }

                /**
                 * Callback function used for processing the payment and sending it to Buckaroo.
                 *
                 * @param payment
                 * @returns {Promise<{errors: Array, status: *}>}
                 */
                ApplePay.prototype.captureFunds = function(payment) {
                    return new Promise(function(resolve) {
                        var authorizationSuccessResult = {
                            status: ApplePaySession.STATUS_SUCCESS,
                            errors: []
                        };

                        var authorizationFailedResult = {
                            status: ApplePaySession.STATUS_FAILURE,
                            errors: []
                        };

                        var placeOrderRequest = new ApplePay.prototype.placeOrder(payment);

                        placeOrderRequest.done(function() {
                            resolve(authorizationSuccessResult);
                        });

                        placeOrderRequest.fail(function() {
                            ApplePay.prototype.restoreCart();
                            resolve(authorizationFailedResult);
                        });
                    })
                }

                return ApplePay
            }())
            Magento.ApplePay = ApplePay
        })(Magento = Buckaroo.Magento || (Buckaroo.Magento = {}))
    })(Buckaroo || (Buckaroo = {}));

    (function () {
        var handler = new Buckaroo.Magento.ApplePay();
        handler.initialize();
    })();
</script>